# Watermeter
#
# THIS FILE IS ONLY FOR WATERMETERKIT MODEL C!
#
# The blue LED tells the device is powered on (built-in on the Wemos D1 mini).
# The green LED blinks when a pulse is measures (each liter of water used).
# The red LED shows if there is a problem:
# - Blinks slow (once a second): Connection disrupted
# - Blinks fast: ESPHome has an error settings up
# - Off: All fine!
#

#Name of device
substitutions:
  name: watermeter
  friendly_name: Watermeter
  time_timezone: "Europe/Amsterdam"
  watermeterkit_version: "2.0"
  watermeterkit_model: "model-c"

#Set up ESPHome
esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  project:
    name: dwainscheeren.watermeterkit
    version: "${watermeterkit_version}"

esp8266:
  board: d1_mini

#WiFi Settings
wifi:
  #ssid: !secret wifi_ssid
  #password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Watermeter Installation"
    password: "watermeter"

#Enable fallback if WiFi is not found
captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

# Enable over the air updates
ota:

# Status LED of ESP
status_led:
  pin: D3

# Switch to restart the watermeter
switch:
  - platform: restart
    id: switch_restart
    name: Restart
    
# Time for uptime
time:
  - platform: homeassistant
    id: time_homeassistant
    timezone: "${time_timezone}"
    on_time_sync:
      - component.update: sensor_uptime_timestamp
      
  - platform: sntp
    id: time_sntp
    timezone: "${time_timezone}"
    
# I²C Bus
#
# This component sets up the I²C bus for the ESP8266.
#
# https://esphome.io/components/i2c.html
#
i2c:
  sda: GPIO4
  scl: GPIO5
  
  
output:
  - platform: esp8266_pwm
    id: output_led_green
    pin: D4

light:
  - platform: monochromatic
    id: light_led_green
    output: output_led_green
  
sensor:
  #WiFi signal
  - platform: wifi_signal
    name: WiFi Signal
    update_interval: 300s
    id: sensor_wifi_signal
  # Uptime Sensor
  #
  # The uptime sensor allows you to track the time the ESP has stayed up for in
  # seconds. Time rollovers are automatically handled.
  #
  # https://esphome.io/components/sensor/uptime.html
  #
  #
  # WARNING! DO NOT USE THIS SENSOR IN HOME ASSISTANT!
  #
  # I see many of you using this sensor in Home Assistant, but please, don't.
  # There is no need to have an update of the uptime, just send the timestamp
  # of when the device started ONCE. It will have the same effect and saves
  # you system tons of processing and recording.
  #
  - platform: uptime
    id: sensor_uptime
  # Uptime Timestamp Sensor
  #
  # This sensor is an alternative for the uptime sensor, which only sends the
  # startup timestamp of the device ONCE! Instead of sending updates to
  # Home Assistant constantly.
  #
  # This saves you tons of updates to be processed and, if recorded/stored in the
  # Home Assistant database, many many less rows.
  #
  # This sensor can be triggered manually and will only update the status once!
  #
  - platform: template
    id: sensor_uptime_timestamp
    name: Uptime
    device_class: "timestamp"
    accuracy_decimals: 0
    update_interval: never
    lambda: |-
      static float timestamp = (
        id(time_homeassistant).utcnow().timestamp - id(sensor_uptime).state
      );
      return timestamp;
  - platform: pulse_meter
    id: sensor_pulse_meter
    name: Current Usage
    icon: "mdi:water-pump"
    unit_of_measurement: "L/min"
    timeout: 2min
    accuracy_decimals: 1
    filters:
      - multiply: 0.5
    total:
      id: sensor_pulse_meter_total
      name: Total Consumption
      icon: "mdi:cube-outline"
      unit_of_measurement: "m³"
      state_class: total_increasing
      device_class: water
      accuracy_decimals: 3
      filters:
        - multiply: 0.0005
    pin:
      number: D5
      mode:
        input: true
        pullup: true
    on_value:
      then:
        - light.turn_on:
            id: light_led_green
            flash_length: 1s
  - platform: hdc1080
    temperature:
      id: sensor_temperature
      name: Temperature
    humidity:
      id: sensor_humidity
      name: Humidity
    update_interval: 600s
    
text_sensor:
  # IP address #
  - platform: wifi_info
    ip_address:
      name: IP address
      icon: "mdi:network-outline"
    ssid:
      name: Connected SSID
    bssid:
      name: Connected BSSID
  - platform: version
    id: text_sensor_version
    name: ESPHome Version
  - platform: template
    id: text_sensor_watermeterkit_version
    name: Version
    update_interval: 5h
    lambda: |-
      return {"${watermeterkit_version}"};
  - platform: template
    id: text_sensor_watermeterkit_model
    name: Model
    update_interval: 5h
    lambda: |-
      return {"${watermeterkit_model}"};
